// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/secret/secrettype.go

// Package secret is a generated GoMock package.
package secret

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecretOperator is a mock of SecretOperator interface.
type MockSecretOperator struct {
	ctrl     *gomock.Controller
	recorder *MockSecretOperatorMockRecorder
}

// MockSecretOperatorMockRecorder is the mock recorder for MockSecretOperator.
type MockSecretOperatorMockRecorder struct {
	mock *MockSecretOperator
}

// NewMockSecretOperator creates a new mock instance.
func NewMockSecretOperator(ctrl *gomock.Controller) *MockSecretOperator {
	mock := &MockSecretOperator{ctrl: ctrl}
	mock.recorder = &MockSecretOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretOperator) EXPECT() *MockSecretOperatorMockRecorder {
	return m.recorder
}

// GetSecret mocks base method.
func (m *MockSecretOperator) GetSecret(secretOptions SecretOptions) (*SecretData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", secretOptions)
	ret0, _ := ret[0].(*SecretData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockSecretOperatorMockRecorder) GetSecret(secretOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockSecretOperator)(nil).GetSecret), secretOptions)
}

// GetToken mocks base method.
func (m *MockSecretOperator) GetToken(namespace string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", namespace)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockSecretOperatorMockRecorder) GetToken(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockSecretOperator)(nil).GetToken), namespace)
}
